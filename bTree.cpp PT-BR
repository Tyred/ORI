/*  Construtor para árvore B
    t is the minimum degree of the tree.
    compare is the comparison function used for managing elements within the tree.
    printK is a function that prints keys. */
template <typename T>
BTree<T>::BTree(unsigned t, bool (*compare)(T, T), void (*printK)(T)) {
	minDegree = t;
	lessThan = compare;
	root = (BNode<T>*) malloc(sizeof(BNode<T>));
	initializeNode(root);
	root->leaf = true;
	printKey = printK;
}


/* Destrutor */
template <typename T>
BTree<T>::~BTree<T>() {
	freeNode(root);
}


/* Insere a chave na árvore. */
template <typename T>
void BTree<T>::insert(T k) {

        /* Cresce se a raiz está cheia */.
	if (root->size == 2 * minDegree - 1) {
		BNode<T> *newRoot = (BNode<T>*) malloc(sizeof(BNode<T>));
		initializeNode(newRoot);
		newRoot->leaf = false;
		newRoot->child[0] = root;
		root = newRoot;
		splitChild(newRoot, 0);
	}

	/* Trabalha abaixo da árvore. */
	BNode<T> *curr = root;
	while (!curr->leaf) {

		/* Encontra para onde o filho deve ir. */
		int index = curr->size - 1;
		while (index >= 0 && lessThan(k, curr->key[index])) {
			index--;
		}
		index++;

		/* Divide o filho se está cheio */.
		if (curr->child[index]->size == 2 * minDegree - 1) {
			splitChild(curr, index);
			if (lessThan(curr->key[index], k)) {
				index++;
			}
		}
		curr = curr->child[index];
	}

	nodeInsert(curr, k);
}


/* Remove k da árvore e retona a chave removida */.
/* Lança um BTREE_EXCEPTION se a chave nao foi encontrada. */
template <typename T>
T BTree<T>::remove(T k) {
	BNode<T> *curr = root;
	while (true) {
		unsigned i = findIndex(curr, k);

		/* Se o item a ser excluido foi encontrado */.
		if (i < curr->size && !(lessThan(curr->key[i], k) || lessThan(k, curr->key[i]))) {
			T toReturn = curr->key[i];

			/* Se estiver numa folha, vai excluir a folha */
			if (curr->leaf) {
				nodeDelete(curr, i);
			}

			/* Caso contrário, substitua por predecessor / sucessor ou mescle filhos */
			else {
				BNode<T> *leftKid = curr->child[i];
				BNode<T> *rightKid = curr->child[i + 1];

				/* Substituta pelo predecessor */
				if (leftKid->size >= minDegree) {
					while (!(leftKid->leaf)) {
						fixChildSize(leftKid, leftKid->size);
						leftKid = leftKid->child[leftKid->size];
					}
					curr->key[i] = nodeDelete(leftKid, leftKid->size - 1);
				}

				/* Substituta pelo sucessor */
				else if (rightKid->size >= minDegree) {
					while (!(rightKid->leaf)) {
						fixChildSize(rightKid, 0);
						rightKid = rightKid->child[0];
					}
					curr->key[i] = nodeDelete(rightKid, 0);
				}

				/* Mescla os filhos e desce a árvore */
				else {
					mergeChildren(curr, i);
					curr = leftKid;
					continue;
				}
			}
			return toReturn;
		}

		/* Se o item nao foi encontrado, desce a árvore */.
		else {

			/* Se estiver na folha, item nao foi encontrado */
			if (curr->leaf) {
				throw (BTREE_EXCEPTION) REMOVE_KEY_NOT_FOUND;
			}

			/* Ajustar a corrente e desce na árvore */
			char result = fixChildSize(curr, i);
			if (result == NEW_ROOT) {
				curr = root;
			}
			else {
				curr = curr->child[findIndex(curr, k)];
			}
		}
	}
}


/* Função para encontrar uma chave na árvore. */
/* returnValue.first é o nó em que o item está */
/* returnValue.second é o índice correto na matriz de chaves desse nó */
template <typename T>
pair<BNode<T>*, unsigned> BTree<T>::search(T k) {

	/* Inicia a raiz */.
	BNode<T> *x = root;

	/* Desce na árvore */.
	while (true) {

		/* Encontre o índice adequado na matriz do nó atual */
		unsigned i = findIndex(x, k);

		/* Encontrado */
		if (i < x->size && !(lessThan(k, x->key[i]) || lessThan(x->key[i], k))) {
			return pair<BNode<T>*, unsigned>(x, i);
		}

		/* Vai até o fundo da árvore */
		else if (x->leaf) {
			return pair<BNode<T>*, unsigned>(NULL, 0);
		}

		/* Continua a procurar */
		else {
			x = x->child[i];
		}
	}
}


/* Função para encontrar a chave na árvore */
/* Retorna a chave */
/* Se a chave nao for encontrada, uma execeção é lancada */
template <typename T>
T BTree<T>::searchKey(T k) {
	pair<BNode<T>*, unsigned> node = search(k);
	if (node.first == NULL) {
		throw (BTREE_EXCEPTION) SEARCH_KEY_NOT_FOUND;
	}
	return node.first->key[node.second];
}


/* Função para printar a arvore */
template <typename T>
void BTree<T>::print() {
	if (printKey != NULL && root != NULL) {
		printf("\n");
		printNode(root, 0);
		printf("\n");
	}
}


/* Inicialize um nó de árvore b */
/* x é um ponteiro para o nó */
/* t é o grau mínimo da árvore */
template <typename T>
void BTree<T>::initializeNode(BNode<T> *x) {
	x->size = 0;
	x->key = (T*) malloc((2 * minDegree - 1) * sizeof(T));
	x->child = (BNode<T>**) malloc(2 * minDegree * sizeof(BNode<T>*));
}


/* Exclui recursivamente a subárvore com raiz em x */
template <typename T>
void BTree<T>::freeNode(BNode<T> *x) {
	if (!x->leaf) {
		for (unsigned i = 0; i <= x->size; i++) {
			freeNode(x->child[i]);
		}
	}
	free(x->child);
	free(x->key);
	free(x);
}

 
/* Localiza o índice de k na chave x-> */
/* Se k não estiver presente, retorna o índice da subárvore 
   que poderia conter em x->child */
template <typename T>
unsigned BTree<T>::findIndex(BNode<T> *x, T k) {
	unsigned i = 0;
	while (i < x->size && lessThan(x->key[i], k)) {
		i++;
	}
	return i;
}


/* Insere K em X */
/* Retorna o indice de k na chave x->key */
template <typename T>
unsigned BTree<T>::nodeInsert(BNode<T> *x, T k) {
	int index;

	/* Abre espaço para k */.
	for (index = x->size; index > 0 && lessThan(k, x->key[index - 1]); index--) {
		x->key[index] = x->key[index - 1];
		x->child[index + 1] = x->child[index];
	}

	/* Insere K */.
	x->child[index + 1] = x->child[index];
	x->key[index] = k;
	x->size++;

	return index;
}


/* Deleta o elemento apontado por x->key. */
/* Retorna a chave deletada */
template <typename T>
T BTree<T>::nodeDelete(BNode<T> *x, unsigned index) {

	T toReturn = x->key[index];

	x->size--;
	while (index < x->size) {
		x->key[index] = x->key[index + 1];
		x->child[index + 1] = x->child[index + 2];
		index++;
	}
	return toReturn;
}


/* Função para dividir nós que estão muito cheios */
/*  X aponta para o pai do nó a ser dividido. */
/*  i é o índice na matriz filho de x do nó a ser dividido */
template <typename T>
void BTree<T>::splitChild(BNode<T> *x, int i) {

	/* Z é um novo Nó e Y tem que ser dividido */
	BNode<T> *toSplit = x->child[i];
	BNode<T>* newNode = (BNode<T>*) malloc(sizeof(BNode<T>));;
	initializeNode(newNode);
	newNode->leaf = toSplit->leaf;
	newNode->size = minDegree - 1;

	/* Copie a segunda metade das chaves e filhos de y em z */
	for (unsigned j = 0; j < minDegree - 1; j++) {
		newNode->key[j] = toSplit->key[j + minDegree];
	}
	if (!toSplit->leaf) {
		for (unsigned j = 0; j < minDegree; j++) {
			newNode->child[j] = toSplit->child[j + minDegree];
		}
	}
	toSplit->size = minDegree - 1;

	nodeInsert(x, toSplit->key[minDegree - 1]);
	x->child[i + 1] = newNode;
}


/* Mescla o (i + 1) th filho dos pais com o i-ésimo filho dos pais */
/* Retorna um indicador caso a alteração tenha ferido a raiz */
template <typename T>
char BTree<T>::mergeChildren(BNode<T> *parent, unsigned i) {

	BNode<T> *leftKid = parent->child[i];
	BNode<T> *rightKid = parent->child[i + 1];

	/* Move o item do pai para o filho esquerdo */
	leftKid->key[leftKid->size] = nodeDelete(parent, i);
	unsigned j = ++(leftKid->size);

	/* Mover tudo de rightKid para leftKid */
	for (unsigned k = 0; k < rightKid->size; k++) {
		leftKid->key[j + k] = rightKid->key[k];
		leftKid->child[j + k] = rightKid->child[k];
	}
	leftKid->size += rightKid->size;
	leftKid->child[leftKid->size] = rightKid->child[rightKid->size];

	/* Libera memória usada pelo righChild */
	free(rightKid->child);
	free(rightKid->key);
	free(rightKid);

	/* Se o pai estiver vazio, deve ter sido a raiz */.
	if (parent->size == 0) {
		root = leftKid;
		free(parent->child);
		free(parent->key);
		free(parent);
		return NEW_ROOT;
	}

	return MODIFIED_NOT_ROOT;
}


/*  Garante que pai-> filho [índice] possua pelo menos itens minDegree.
    Caso contrário, as coisas serão alteradas para garantir que isso aconteça.
    Retorna um código indicando qual ação foi executada. */
template <typename T>
char BTree<T>::fixChildSize(BNode<T> *parent, unsigned index) {
	BNode<T> *kid = parent->child[index];

	/* Se coisas precisam ser concertadas. */
	if (kid->size < minDegree) {

		/* Pedir emprestado do nó esquerdo, se possível. */.
		if (index != 0 && parent->child[index - 1]->size >= minDegree) {
			BNode<T> *leftKid = parent->child[index - 1];

			/* Quando existem inúmeras chaves equivalentes,
                nodeInsert pode inserir em um índice diferente de 0.
                Os ponteiros filhos corrigidos para loop for, se isso acontecer. */
			for (unsigned i = nodeInsert(kid, parent->key[index - 1]); i != 0; i--) {
				kid->child[i] = kid->child[i - 1];
			}
			kid->child[0] = leftKid->child[leftKid->size];
			parent->key[index - 1] = nodeDelete(leftKid, leftKid->size - 1);
		}

		/* Empresta do irmão, se possivel */
		else if (index != parent->size && parent->child[index + 1]->size >= minDegree) {
			BNode<T> *rightKid = parent->child[index + 1];
			/* Move curr->key[i] para kid->key */
			nodeInsert(kid, parent->key[index]);
			kid->child[kid->size] = rightKid->child[0];
			rightKid->child[0] = rightKid->child[1];
			/* Move rightKid->key[0] para curr->key */
			parent->key[index] = nodeDelete(rightKid, 0);
		}

		/* Se não é possível mesclar as céluas */
		else if (index != 0) {
			return mergeChildren(parent, index - 1);
		}
		else {
			return mergeChildren(parent, index);
		}
		return MODIFIED_NOT_ROOT;
	}

	/* Se não precisa ser fixado. */
	return NOT_MODIFIED;
}


/* Função recursiva para imprimir árvore ou subárvore.
   Nó é a raiz da subárvore a ser impressa.
   Guia é até onde recuar a subárvore. */
template <typename T>
void BTree<T>::printNode(BNode<T> *node, unsigned tab) {

	/* Recuar */
	for (unsigned i = 0; i < tab; i++) {
		printf("\t");
	}

	/* Imprime o nó atual. */
	for (unsigned i = 0; i < node->size; i++) {
		printKey(node->key[i]);
		printf(" ");
	}
	printf("\n");

	/* Imprime os nós filhos. */
	if (!node->leaf) {
		tab++;
		for (unsigned i = 0; i <= node->size; i++) {
			printNode(node->child[i], tab);
		}
	}
}
